TODO:

On the README of workstation:
- We need a local server to server the vagrant box. ( Make a script that will edit the Vagrantfile's box url. Also, Ensure that our machines can serve with the correct directory)


After watching Danni go through the tutorial:
- repackage the VMs with vagrant v1.0.7 (When users try to add the box with Vagrant v1.0.7, they can't do it as it is packgaged with 1.1, not 1.0)
- The test sync-run scripts shouldn't print knife cookbook test outputs (unless it fails)
(Change the wallpaper on the workstation to have an image of where the user is and where that they are running the cookbooks against another node)
- Directory " ______" do action :create end (be more explicit)
- Change the workstation cookbook to add the lines in ssh/config in the workstation node to allow `ssh chef_node`

After watching Derek go through the tutorial:
 - Add more descriptive title for the commit
 - Make the package install vim be explicit with the example

After discussing step 3:
 - It's too damn hard.
 - Make another cookbook or edit a single existing file like apache2.conf instead of creating a new file then a symlink etc.
 - /etc/motd

uninstall update-manager-core
Kill the automatic update popup

kill the constantly trying to connect network-manager
Create a vim config that is owned by vim, using attributes
Create tests to test that downloadme is owned by www-data using attributes
Have the nginx cookbook appear, we have already lwrp-ized it :webroot_dir, :user, :port
LWRP-ize the apache2 cookbook

How do we discuss idempotency and why it's important in configuration?
Workstation needs to somehow block login until after the run is complete.
	Possible solution add an execute 'sudo reboot' at the end of the run to see if it will come back up with the GUI
